<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file ="../../../../BuildTools/Templates/EnumErrorBuilder.ttinclude" #>
<#
    string enumName = "FT_Error";

    List<string> enumValueNames = new List<string>()
    {
        "Ok",

        "Cannot_Open_Resource",
        "Unknown_File_Format",
        "Invalid_File_Format",
        "Invalid_Version",
        "Lower_Module_Version",
        "Invalid_Argument",
        "Unimplemented_Feature",
        "Invalid_Table",
        "Invalid_Offset",
        "Array_Too_Large",
        "Missing_Module",
        "Missing_Property",

        "Invalid_Glyph_Index",
        "Invalid_Character_Code",
        "Invalid_Glyph_Format",
        "Cannot_Render_Glyph",
        "Invalid_Outline",
        "Invalid_Composite",
        "Too_Many_Hints",
        "Invalid_Pixel_Size",

        "Invalid_Handle",
        "Invalid_Library_Handle",
        "Invalid_Driver_Handle",
        "Invalid_Face_Handle",
        "Invalid_Size_Handle",
        "Invalid_Slot_Handle",
        "Invalid_CharMap_Handle",
        "Invalid_Cache_Handle",
        "Invalid_Stream_Handle",

        "Too_Many_Drivers",
        "Too_Many_Extensions",

        "Out_Of_Memory",
        "Unlisted_Object",

        "Cannot_Open_Stream",
        "Invalid_Stream_Seek",
        "Invalid_Stream_Skip",
        "Invalid_Stream_Read",
        "Invalid_Stream_Operation",
        "Invalid_Frame_Operation",
        "Nested_Frame_Access",
        "Invalid_Frame_Read",

        "Raster_Uninitialized",
        "Raster_Corrupted",
        "Raster_Overflow",
        "Raster_Negative_Height",

        "Too_Many_Caches",

        "Invalid_Opcode",
        "Too_Few_Arguments",
        "Stack_Overflow",
        "Code_Overflow",
        "Bad_Argument",
        "Divide_By_Zero",
        "Invalid_Reference",
        "Debug_OpCode",
        "ENDF_In_Exec_Stream",
        "Nested_DEFS",
        "Invalid_CodeRange",
        "Execution_Too_Long",
        "Too_Many_Function_Defs",
        "Too_Many_Instruction_Defs",
        "Table_Missing",
        "Horiz_Header_Missing",
        "Locations_Missing",
        "Name_Table_Missing",
        "CMap_Table_Missing",
        "Hmtx_Table_Missing",
        "Post_Table_Missing",
        "Invalid_Horiz_Metrics",
        "Invalid_CharMap_Format",
        "Invalid_PPem",
        "Invalid_Vert_Metrics",
        "Could_Not_Find_Context",
        "Invalid_Post_Table_Format",
        "Invalid_Post_Table",
        "DEF_In_Glyf_Bytecode",
        "Missing_Bitmap",

        "Syntax_Error",
        "Stack_Underflow",
        "Ignore",
        "No_Unicode_Glyph_Name",
        "Glyph_Too_Big",

        "Missing_Startfont_Field",
        "Missing_Font_Field",
        "Missing_Size_Field",
        "Missing_Fontboundingbox_Field",
        "Missing_Chars_Field",
        "Missing_Startchar_Field",
        "Missing_Encoding_Field",
        "Missing_Bbx_Field",
        "Bbx_Too_Big",
        "Corrupted_Font_Header",
        "Corrupted_Font_Glyphs"
    };

    List<string> enumValueValues = new List<string>()
    {
        "0x00",

        "0x01",
        "0x02",
        "0x03",
        "0x04",
        "0x05",
        "0x06",
        "0x07",
        "0x08",
        "0x09",
        "0x0A",
        "0x0B",
        "0x0C",

        "0x10",
        "0x11",
        "0x12",
        "0x13",
        "0x14",
        "0x15",
        "0x16",
        "0x17",

        "0x20",
        "0x21",
        "0x22",
        "0x23",
        "0x24",
        "0x25",
        "0x26",
        "0x27",
        "0x28",

        "0x30",
        "0x31",

        "0x40",
        "0x41",

        "0x51",
        "0x52",
        "0x53",
        "0x54",
        "0x55",
        "0x56",
        "0x57",
        "0x58",

        "0x60",
        "0x61",
        "0x62",
        "0x63",

        "0x70",

        "0x80",
        "0x81",
        "0x82",
        "0x83",
        "0x84",
        "0x85",
        "0x86",
        "0x87",
        "0x88",
        "0x89",
        "0x8A",
        "0x8B",
        "0x8C",
        "0x8D",
        "0x8E",
        "0x8F",
        "0x90",
        "0x91",
        "0x92",
        "0x93",
        "0x94",
        "0x95",
        "0x96",
        "0x97",
        "0x98",
        "0x99",
        "0x9A",
        "0x9B",
        "0x9C",
        "0x9D",

        "0xA0",
        "0xA1",
        "0xA2",
        "0xA3",
        "0xA4",

        "0xB0",
        "0xB1",
        "0xB2",
        "0xB3",
        "0xB4",
        "0xB5",
        "0xB6",
        "0xB7",
        "0xB8",
        "0xB9",
        "0xBA",

    };

    List<string> enumValueStrings = new List<string>()
    {
        "no error",

        "cannot open resource",
        "unknown file format",
        "broken file",
        "invalid FreeType version",
        "module version is too low",
        "invalid argument",
        "unimplemented feature",
        "broken table",
        "broken offset within table",
        "array allocation size too large",
        "missing module",
        "missing property",

        "invalid glyph index",
        "invalid character code",
        "unsupported glyph image format",
        "cannot render this glyph format",
        "invalid outline",
        "invalid composite glyph",
        "too many hints",
        "invalid pixel size",

        "invalid object handle",
        "invalid library handle",
        "invalid module handle",
        "invalid face handle",
        "invalid size handle",
        "invalid glyph slot handle",
        "invalid charmap handle",
        "invalid cache manager handle",
        "invalid stream handle",

        "too many modules",
        "too many extensions",

        "out of memory",
        "unlisted object",

        "cannot open stream",
        "invalid stream seek",
        "invalid stream skip",
        "invalid stream read",
        "invalid stream operation",
        "invalid frame operation",
        "nested frame access",
        "invalid frame read",

        "raster uninitialized",
        "raster corrupted",
        "raster overflow",
        "negative height while rastering",

        "too many registered caches",

        "invalid opcode",
        "too few arguments",
        "stack overflow",
        "code overflow",
        "bad argument",
        "division by zero",
        "invalid reference",
        "found debug opcode",
        "found ENDF opcode in execution stream",
        "nested DEFS",
        "invalid code range",
        "execution context too long",
        "too many function definitions",
        "too many instruction definitions",
        "SFNT font table missing",
        "horizontal header (hhea table missing",
        "locations (loca table missing",
        "name table missing",
        "character map (cmap table missing",
        "horizontal metrics (hmtx table missing",
        "PostScript (post table missing",
        "invalid horizontal metrics",
        "invalid character map (cmap format",
        "invalid ppem value",
        "invalid vertical metrics",
        "could not find context",
        "invalid PostScript (post table format",
        "invalid PostScript (post table",
        "found FDEF or IDEF opcode in glyf bytecode",
        "missing bitmap in strike",

        "opcode syntax error",
        "argument stack underflow",
        "ignore",
        "no Unicode glyph name found",
        "glyph too big for hinting",

        "`STARTFONT` field missing",
        "`FONT` field missing",
        "`SIZE` field missing",
        "`FONTBOUNDINGBOX` field missing",
        "`CHARS` field missing",
        "`STARTCHAR` field missing",
        "`ENCODING` field missing",
        "`BBX` field missing",
        "`BBX` too big",
        "Font header corrupted or missing fields",
        "Font glyphs corrupted or missing fields"
    };

    string valueType = "int";
    int indentLevel = 1;
#>
namespace FreeType
{
<#= ENUM_BUILDER(false, enumName, enumValueNames, enumValueValues, enumValueStrings, valueType, indentLevel)#>
}
